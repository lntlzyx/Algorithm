//背包、队列、栈
//API
/**
 * 背包
 * public class Bag<Item> implements Iterable<Item>
 *              Bag()           创建一个空背包
 *         viod add(Item item)  创建一个元素
 *      boolean isEmpty()       背包是否为空
 *          int size()          背包中的元素数量
 * 
 */

import java.util.Iterator;

public class Bag<Item> implements Iterable<Item>
{
    private Item[] a;  //Bag entries
    private int N;     //size
    public Bag()
    {
        a=(Item[])new Object[2];//默认初始化一个有2个元素空间
    }
    public boolean isEmpty(){return N==0;}
    public int size(){return N;}
    public void add(Item item){
        if(N==a.length) resize(2*a.length);
        a[N++]=item;
    }

    private void resize(int max){
        Item[] temp=(Item[]) new Object[max];
        for(int i=0;i<N;i++)
            temp[i]=a[i];
        a=temp;
    }

    public Iterator<Item> iterator()
    {return new ReverseArrayIterator();}

    private class ReverseArrayIterator implements Iterator<Item>
    {
        private int i=N;
        public boolean hasNext(){return i>0;}
        public Item next(){return a[--i];}
        public void remove(){}
    }
}
