
<!DOCTYPE html>
<html>
<head>
<style>
input.valinput {
width:30px;
}
</style>

</head>
<body>
三、多维数组和广义表:

<br>1、多维数组:<br>

初始化:<input type='button' value='提交'  onclick='initMulArray(dsMulArr)'>
<div><div><span>操作:</span><input id='fshvalue' type="text"  class='valinput'  >
<input type='button' value='提交'   onclick='this.parentNode.getElementsByTagName("input")[0].value=dealMulArray(dsMulArr)'>
</div></div>

<script>
var dsMulArr={
data:null
};
var dsOneXl=null;

function initMulArray(iarr){
	var p=[[1,5,1,3,7],
    	   [5,0,8,0,0],
           [1,8,9,2,6],
           [3,0,2,5,1],
           [7,0,6,1,3]];
           
   var ps=[[1,5,1,3,7],
    	   [1,0,8,0,0],
           [1,1,9,2,6],
           [1,1,1,5,1],
           [1,1,1,1,3]];

   var px=[[1,0,0,0,0],
    	   [5,0,0,0,0],
           [1,8,9,0,0],
           [3,0,2,5,0],
           [7,0,6,1,3]];

    iarr.data=px;
	dsOneXl=null;
    console.log("mul array is:");
    console.log(iarr);
    console.log("one xl is :");
    console.log(dsOneXl);
}
    
//
function dealMulArray(iarr){
	//行列方式读取数据
    console.log("mul array rows is:"+iarr.data.length);
    console.log("mul array columns is:"+iarr.data[0].length);
    
    var tmp="";
    for(var i=0,lenr=iarr.data.length;i<lenr;i++){
    	for(var j=0,lenc=iarr.data[i].length;j<lenc;j++)
    		tmp+=iarr.data[i][j]+((j==lenc-1)?'\n':' ');
    }
    console.log(tmp);
    console.log(iarr);
    
    //n维对称矩阵的压缩存储
    //下标i:行,j:列  那么下三角部分:i>j,对角部分:i=j,上三角部分:i<j
    //i和j初始0时,Aij地址=i*(i+1)/2+j,Aji=Aij=j*(j+1)/2+i;
    //下三角、对角、上三角统一为：Aij=max(i,j)*(max(i,j)+1)/2+min(i,j)
    dsOneXl=[];
    for(i=0,lenr=iarr.data.length;i<lenr;i++)
    	for(j=0,lenc=iarr.data[i].length;j<lenc;j++)
        	dsOneXl[max(i,j)*(max(i,j)+1)/2+min(i,j)]=iarr.data[i][j];
    
    console.log(dsOneXl);
    
    //n阶方阵的上三角矩阵和下三角矩阵 元素数量:(n+1)*n/2
    //上三角:i>j时均为常数c,Aij=(n+1)*n/2,i<=j时,Aij=(n+n-i)*i/2+(j-i)
    dsOneXl=[];
    for(i=0,lenr=iarr.data.length;i<lenr;i++)
    	for(j=0,lenc=iarr.data[i].length;j<lenc;j++){
        	if(i<=j)
            	dsOneXl[(lenr+lenr-i)*i/2+(j-i)]=iarr.data[i][j];
            else
            	dsOneXl[(lenr+1)*lenr/2]=iarr.data[i][j];
            }
    console.log(dsOneXl);
    //下三角:i<j时均为常数c,Aij=(n+1)*n/2;i>=j时,Aij=i*(i+1)/2+j-1
    dsOneXl=[];
    for(i=0,lenr=iarr.data.length;i<lenr;i++)
    	for(j=0,lenc=iarr.data[i].length;j<lenc;j++){
        	if(i>=j)
            	dsOneXl[(i+1)*i/2+j]=iarr.data[i][j];
            else
            	dsOneXl[(lenr+1)*lenr/2]=iarr.data[i][j];
            }
    console.log(dsOneXl);    
    return 'over!';
}

function max(val1,val2){
	return (val1>val2)?val1:val2;
    }
function min(val1,val2){
	return (val1>val2)?val2:val1;
    }
</script>



</body>
</html> 
