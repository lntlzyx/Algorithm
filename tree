
<!DOCTYPE html>
<html>
<head>
<style>
input.valinput {
width:30px;
}
</style>

</head>
<body>
四、树:

<br>1、二叉树:<br>

初始化:<input type='button' value='提交'  onclick='initTree(dsTree)'>
<div><div><span>操作:</span><input id='fshvalue' type="text"  class='valinput'  >
<input type='button' value='提交'   onclick='this.parentNode.getElementsByTagName("input")[0].value=dealMulArray(dsMulArr)'>
</div></div>

<script>
//存储结构 --二叉树
var dsTree={
	data:null,//数据
    lc:null,  //左孩子
    rc:null  //右孩子
};

var dsT={
	pTree:{}
};
    var preData1=['a','b','d',null,null,'e',null,null,'c',null,'f','g',null,null];
    var pos1=0;
//初始化
function initTree(itree){
	//初始数据
    var tmp;
	var root=[];
    //root=itree;
    var ttree={
           data:'a',
           ltag:0,
           lc:{data:'b',lc:{data:'d',ltag:0,lc:null,rtag:0,rc:null},
                        rc:{data:'e',ltag:0,lc:null,rtag:0,rc:null}},
           rtag:0,
           rc:{data:'c',ltag:0,lc:null,rtag:0,rc:null}
           };
           
    var initData=['a','ab','ac','bd','be','cf','cg',null,null,null,'eh','fi',null,'gj','gk'];
    
    var preData=['a','b','d',null,null,'e',null,null,'c',null,null];
    var pTree={};
    
    for(var i=0,len=initData.length;i<len;i++){
      tmp={data:initData[i],lc:null,rc:null};
      root[i]=tmp;
	}
    for(i=0,len=Math.floor(root.length/2);i<len;i++){
    	root[i].lc=((root[2*i+1].data===null)?null:root[2*i+1]);
        root[i].rc=((root[2*i+2].data===null)?null:root[2*i+2]);
    }
    itree=root[0];
    
    //创建二叉树 先序遍历 
	createTree(pTree);
    
    console.log('pTree:');
	console.log(pTree);
    
    //前序遍历（前根遍历）
    console.log("pre:");
    preRoot(ttree);  
    //中序遍历（中根遍历）
    console.log("middle:");
    midRoot(ttree); 
    //后序遍历（后根遍历）
    console.log("rear:");
    reaRoot(ttree); 
    
    //线索二叉树
    console.log("thead:");
    console.log(ttree);
    theadTree(ttree,null);
    console.log("theaded:");
    console.log(ttree);    
}

//创建二叉树链表 (基于前序遍历)
function createTree(itree){
	if(itree===null) return;

    itree.data=preData1[pos1];
    
    pos1++;
    itree.lc=((preData1[pos1]==null)?null:{});
    createTree(itree.lc,preData1,pos1);
    
    pos1++;
    itree.rc=((preData1[pos1]==null)?null:{});
    createTree(itree.rc,preData1,pos1);
}

//前序遍历NLR（前根遍历）
function preRoot(itree){
	if(itree===null) return;
    console.log(itree.data);
    
    preRoot(itree.lc);
    preRoot(itree.rc);
}

//中序遍历LNR（中根遍历）
function midRoot(itree){
	if(itree===null) return;

    midRoot(itree.lc);
    console.log(itree.data);    
    midRoot(itree.rc);
}

//后序遍历LRN（后根遍历）
function reaRoot(itree){
	if(itree===null) return;

    reaRoot(itree.lc);
    reaRoot(itree.rc);
    console.log(itree.data);    
}

//线索二叉树
function theadTree(itree,ptree){
	if(itree===null) return;

    theadTree(itree.lc,itree);
	if(itree.lc==null){
   //console.log(ptree);
        itree.ltag=1;
    }
    if(itree.rc==null){
    	itree.rtag=1;
    }
    theadTree(itree.rc,itree);
}

</script>



</body>
</html> 

